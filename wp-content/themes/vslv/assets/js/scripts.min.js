var VSLV_CONFIG = {
    lang: APP_DATA.lang || "fr",
    base_url: "/wp-json.php/",
    discovery_wp_image_size: "discovery",
    modules: {
        page: {
            name: "page",
            route: "pages"
        },
        project: {
            name: "project",
            route: "projects"
        }
    }
};

+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
    });
}(jQuery);

+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).on("click", dismiss, this.close);
    };
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = $(selector);
        if (e) e.preventDefault();
        if (!$parent.length) {
            $parent = $this.hasClass("alert") ? $this : $this.parent();
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed.bs.alert").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement();
    };
    var old = $.fn.alert;
    $.fn.alert = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", data = new Alert(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close);
}(jQuery);

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
    };
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state = state + "Text";
        if (!data.resetText) $el.data("resetText", $el[val]());
        $el[val](data[state] || this.options[state]);
        setTimeout(function() {
            state == "loadingText" ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
        }, 0);
    };
    Button.prototype.toggle = function() {
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        var changed = true;
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") === "radio") {
                if ($input.prop("checked") && this.$element.hasClass("active")) changed = false; else $parent.find(".active").removeClass("active");
            }
            if (changed) $input.prop("checked", !this.$element.hasClass("active")).trigger("change");
        }
        if (changed) this.$element.toggleClass("active");
    };
    var old = $.fn.button;
    $.fn.button = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if (option == "toggle") data.toggle(); else if (option) data.setState(option);
        });
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.button("toggle");
        e.preventDefault();
    });
}(jQuery);

+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        this.options.pause == "hover" && this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this));
    };
    Carousel.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: true
    };
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this;
    };
    Carousel.prototype.getActiveIndex = function() {
        this.$active = this.$element.find(".item.active");
        this.$items = this.$active.parent().children();
        return this.$items.index(this.$active);
    };
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getActiveIndex();
        if (pos > this.$items.length - 1 || pos < 0) return;
        if (this.sliding) return this.$element.one("slid.bs.carousel", function() {
            that.to(pos);
        });
        if (activeIndex == pos) return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
    };
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition.end) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };
    Carousel.prototype.next = function() {
        if (this.sliding) return;
        return this.slide("next");
    };
    Carousel.prototype.prev = function() {
        if (this.sliding) return;
        return this.slide("prev");
    };
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || $active[type]();
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var fallback = type == "next" ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) return;
            $next = this.$element.find(".item")[fallback]();
        }
        this.sliding = true;
        isCycling && this.pause();
        var e = $.Event("slide.bs.carousel", {
            relatedTarget: $next[0],
            direction: direction
        });
        if ($next.hasClass("active")) return;
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            this.$element.one("slid.bs.carousel", function() {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                $nextIndicator && $nextIndicator.addClass("active");
            });
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one($.support.transition.end, function() {
                $next.removeClass([ type, direction ].join(" ")).addClass("active");
                $active.removeClass([ "active", direction ].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger("slid.bs.carousel");
                }, 0);
            }).emulateTransitionEnd(600);
        } else {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger("slid.bs.carousel");
        }
        isCycling && this.cycle();
        return this;
    };
    var old = $.fn.carousel;
    $.fn.carousel = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data) $this.data("bs.carousel", data = new Carousel(this, options));
            if (typeof option == "number") data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(e) {
        var $this = $(this), href;
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) options.interval = false;
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) {
            $target.data("bs.carousel").to(slideIndex);
        }
        e.preventDefault();
    });
    $(window).on("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            $carousel.carousel($carousel.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) this.$parent = $(this.options.parent);
        if (this.options.toggle) this.toggle();
    };
    Collapse.DEFAULTS = {
        toggle: true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) return;
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed");
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        }
        $target.collapse(option);
    });
}(jQuery);

+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = "[data-toggle=dropdown]";
    var Dropdown = function(element) {
        $(element).on("click.bs.dropdown", this.toggle);
    };
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus);
            }
            $parent.trigger(e = $.Event("show.bs.dropdown"));
            if (e.isDefaultPrevented()) return;
            $parent.toggleClass("open").trigger("shown.bs.dropdown");
            $this.focus();
        }
        return false;
    };
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27)/.test(e.keyCode)) return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive || isActive && e.keyCode == 27) {
            if (e.which == 27) $parent.find(toggle).focus();
            return $this.click();
        }
        var $items = $("[role=menu] li:not(.divider):visible a", $parent);
        if (!$items.length) return;
        var index = $items.index($items.filter(":focus"));
        if (e.keyCode == 38 && index > 0) index--;
        if (e.keyCode == 40 && index < $items.length - 1) index++;
        if (!~index) index = 0;
        $items.eq(index).focus();
    };
    function clearMenus() {
        $(backdrop).remove();
        $(toggle).each(function(e) {
            var $parent = getParent($(this));
            if (!$parent.hasClass("open")) return;
            $parent.trigger(e = $.Event("hide.bs.dropdown"));
            if (e.isDefaultPrevented()) return;
            $parent.removeClass("open").trigger("hidden.bs.dropdown");
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent();
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data) $this.data("bs.dropdown", data = new Dropdown(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle + ", [role=menu]", Dropdown.prototype.keydown);
}(jQuery);

+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        if (this.options.remote) this.$element.load(this.options.remote);
    };
    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this[!this.isShown ? "show" : "hide"](_relatedTarget);
    };
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            relatedTarget: _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) return;
        this.isShown = true;
        this.escape();
        this.$element.on("click.dismiss.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(document.body);
            }
            that.$element.show();
            if (transition) {
                that.$element[0].offsetWidth;
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                relatedTarget: _relatedTarget
            });
            transition ? that.$element.find(".modal-dialog").one($.support.transition.end, function() {
                that.$element.focus().trigger(e);
            }).emulateTransitionEnd(300) : that.$element.focus().trigger(e);
        });
    };
    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) return;
        this.isShown = false;
        this.escape();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
    };
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.focus();
            }
        }, this));
    };
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.on("keyup.dismiss.bs.modal", $.proxy(function(e) {
                e.which == 27 && this.hide();
            }, this));
        } else if (!this.isShown) {
            this.$element.off("keyup.dismiss.bs.modal");
        }
    };
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.removeBackdrop();
            that.$element.trigger("hidden.bs.modal");
        });
    };
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    Modal.prototype.backdrop = function(callback) {
        var that = this;
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
            this.$element.on("click.dismiss.modal", $.proxy(function(e) {
                if (e.target !== e.currentTarget) return;
                this.options.backdrop == "static" ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
            }, this));
            if (doAnimate) this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback) return;
            doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (callback) {
            callback();
        }
    };
    var old = $.fn.modal;
    $.fn.modal = function(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.modal", data = new Modal(this, options));
            if (typeof option == "string") data[option](_relatedTarget); else if (options.show) data.show(_relatedTarget);
        });
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        e.preventDefault();
        $target.modal(option, this).one("hide", function() {
            $this.is(":visible") && $this.focus();
        });
    });
    $(document).on("show.bs.modal", ".modal", function() {
        $(document.body).addClass("modal-open");
    }).on("hidden.bs.modal", ".modal", function() {
        $(document.body).removeClass("modal-open");
    });
}(jQuery);

+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options);
    };
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
            } else if (trigger != "manual") {
                var eventIn = trigger == "hover" ? "mouseenter" : "focus";
                var eventOut = trigger == "hover" ? "mouseleave" : "blur";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle();
    };
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS;
    };
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {
                show: options.delay,
                hide: options.delay
            };
        }
        return options;
    };
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value;
        });
        return options;
    };
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) return self.show();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "in") self.show();
        }, self.options.delay.show);
    };
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) return self.hide();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "out") self.hide();
        }, self.options.delay.hide);
    };
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            var $tip = this.tip();
            this.setContent();
            if (this.options.animation) $tip.addClass("fade");
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(placement);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var $parent = this.$element.parent();
                var orgPlacement = placement;
                var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth = this.options.container == "body" ? window.innerWidth : $parent.outerWidth();
                var parentHeight = this.options.container == "body" ? window.innerHeight : $parent.outerHeight();
                var parentLeft = this.options.container == "body" ? 0 : $parent.offset().left;
                placement = placement == "bottom" && pos.top + pos.height + actualHeight - docScroll > parentHeight ? "top" : placement == "top" && pos.top - docScroll - actualHeight < 0 ? "bottom" : placement == "right" && pos.right + actualWidth > parentWidth ? "left" : placement == "left" && pos.left - actualWidth < parentLeft ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            this.$element.trigger("shown.bs." + this.type);
        }
    };
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var replace;
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) marginTop = 0;
        if (isNaN(marginLeft)) marginLeft = 0;
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $tip.offset(offset).addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            replace = true;
            offset.top = offset.top + height - actualHeight;
        }
        if (/bottom|top/.test(placement)) {
            var delta = 0;
            if (offset.left < 0) {
                delta = offset.left * -2;
                offset.left = 0;
                $tip.offset(offset);
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
            }
            this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
        } else {
            this.replaceArrow(actualHeight - height, actualHeight, "top");
        }
        if (replace) $tip.offset(offset);
    };
    Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
        this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
    };
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right");
    };
    Tooltip.prototype.hide = function() {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if (that.hoverState != "in") $tip.detach();
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        this.$element.trigger("hidden.bs." + this.type);
        return this;
    };
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
        }
    };
    Tooltip.prototype.hasContent = function() {
        return this.getTitle();
    };
    Tooltip.prototype.getPosition = function() {
        var el = this.$element[0];
        return $.extend({}, typeof el.getBoundingClientRect == "function" ? el.getBoundingClientRect() : {
            width: el.offsetWidth,
            height: el.offsetHeight
        }, this.$element.offset());
    };
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
        };
    };
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title;
    };
    Tooltip.prototype.tip = function() {
        return this.$tip = this.$tip || $(this.options.template);
    };
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    };
    Tooltip.prototype.validate = function() {
        if (!this.$element[0].parentNode) {
            this.hide();
            this.$element = null;
            this.options = null;
        }
    };
    Tooltip.prototype.enable = function() {
        this.enabled = true;
    };
    Tooltip.prototype.disable = function() {
        this.enabled = false;
    };
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    };
    Tooltip.prototype.toggle = function(e) {
        var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    };
    Tooltip.prototype.destroy = function() {
        this.hide().$element.off("." + this.type).removeData("bs." + this.type);
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.tooltip", data = new Tooltip(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS;
    };
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content")[this.options.html ? "html" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
    };
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    };
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content);
    };
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    };
    Popover.prototype.tip = function() {
        if (!this.$tip) this.$tip = $(this.options.template);
        return this.$tip;
    };
    var old = $.fn.popover;
    $.fn.popover = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.popover", data = new Popover(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var href;
        var process = $.proxy(this.process, this);
        this.$element = $(element).is("body") ? $(window) : $(element);
        this.$body = $("body");
        this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", process);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
        this.offsets = $([]);
        this.targets = $([]);
        this.activeTarget = null;
        this.refresh();
        this.process();
    }
    ScrollSpy.DEFAULTS = {
        offset: 10
    };
    ScrollSpy.prototype.refresh = function() {
        var offsetMethod = this.$element[0] == window ? "offset" : "position";
        this.offsets = $([]);
        this.targets = $([]);
        var self = this;
        var $targets = this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#\w/.test(href) && $(href);
            return $href && $href.length && [ [ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
        });
    };
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
        var maxScroll = scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets.last()[0]) && this.activate(i);
        }
        for (i = offsets.length; i--; ) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
        }
    };
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        $(this.selector).parents(".active").removeClass("active");
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active");
        }
        active.trigger("activate.bs.scrollspy");
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var previous = $ul.find(".active:last a")[0];
        var e = $.Event("show.bs.tab", {
            relatedTarget: previous
        });
        $this.trigger(e);
        if (e.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.parent("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: previous
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && $active.hasClass("fade");
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
            element.addClass("active");
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else {
                element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu")) {
                element.closest("li.dropdown").addClass("active");
            }
            callback && callback();
        }
        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
        $active.removeClass("in");
    };
    var old = $.fn.tab;
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault();
        $(this).tab("show");
    });
}(jQuery);

+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$window = $(window).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = null;
        this.checkPosition();
    };
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        offset: 0
    };
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1);
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var scrollHeight = $(document).height();
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        if (typeof offset != "object") offsetBottom = offsetTop = offset;
        if (typeof offsetTop == "function") offsetTop = offset.top();
        if (typeof offsetBottom == "function") offsetBottom = offset.bottom();
        var affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? "bottom" : offsetTop != null && scrollTop <= offsetTop ? "top" : false;
        if (this.affixed === affix) return;
        if (this.unpin) this.$element.css("top", "");
        this.affixed = affix;
        this.unpin = affix == "bottom" ? position.top - scrollTop : null;
        this.$element.removeClass(Affix.RESET).addClass("affix" + (affix ? "-" + affix : ""));
        if (affix == "bottom") {
            this.$element.offset({
                top: document.body.offsetHeight - offsetBottom - this.$element.height()
            });
        }
    };
    var old = $.fn.affix;
    $.fn.affix = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.affix", data = new Affix(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom) data.offset.bottom = data.offsetBottom;
            if (data.offsetTop) data.offset.top = data.offsetTop;
            $spy.affix(data);
        });
    });
}(jQuery);

this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = createjs.PreloadJS = createjs.PreloadJS || {};
    a.version = "0.4.1", a.buildDate = "Thu, 12 Dec 2013 23:33:38 GMT";
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function(a, b, c) {
        this.initialize(a, b, c);
    }, b = a.prototype;
    b.type = null, b.target = null, b.currentTarget = null, b.eventPhase = 0, b.bubbles = !1, 
    b.cancelable = !1, b.timeStamp = 0, b.defaultPrevented = !1, b.propagationStopped = !1, 
    b.immediatePropagationStopped = !1, b.removed = !1, b.initialize = function(a, b, c) {
        this.type = a, this.bubbles = b, this.cancelable = c, this.timeStamp = new Date().getTime();
    }, b.preventDefault = function() {
        this.defaultPrevented = !0;
    }, b.stopPropagation = function() {
        this.propagationStopped = !0;
    }, b.stopImmediatePropagation = function() {
        this.immediatePropagationStopped = this.propagationStopped = !0;
    }, b.remove = function() {
        this.removed = !0;
    }, b.clone = function() {
        return new a(this.type, this.bubbles, this.cancelable);
    }, b.toString = function() {
        return "[Event (type=" + this.type + ")]";
    }, createjs.Event = a;
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function() {}, b = a.prototype;
    a.initialize = function(a) {
        a.addEventListener = b.addEventListener, a.on = b.on, a.removeEventListener = a.off = b.removeEventListener, 
        a.removeAllEventListeners = b.removeAllEventListeners, a.hasEventListener = b.hasEventListener, 
        a.dispatchEvent = b.dispatchEvent, a._dispatchEvent = b._dispatchEvent, a.willTrigger = b.willTrigger;
    }, b._listeners = null, b._captureListeners = null, b.initialize = function() {}, 
    b.addEventListener = function(a, b, c) {
        var d;
        d = c ? this._captureListeners = this._captureListeners || {} : this._listeners = this._listeners || {};
        var e = d[a];
        return e && this.removeEventListener(a, b, c), e = d[a], e ? e.push(b) : d[a] = [ b ], 
        b;
    }, b.on = function(a, b, c, d, e, f) {
        return b.handleEvent && (c = c || b, b = b.handleEvent), c = c || this, this.addEventListener(a, function(a) {
            b.call(c, a, e), d && a.remove();
        }, f);
    }, b.removeEventListener = function(a, b, c) {
        var d = c ? this._captureListeners : this._listeners;
        if (d) {
            var e = d[a];
            if (e) for (var f = 0, g = e.length; g > f; f++) if (e[f] == b) {
                1 == g ? delete d[a] : e.splice(f, 1);
                break;
            }
        }
    }, b.off = b.removeEventListener, b.removeAllEventListeners = function(a) {
        a ? (this._listeners && delete this._listeners[a], this._captureListeners && delete this._captureListeners[a]) : this._listeners = this._captureListeners = null;
    }, b.dispatchEvent = function(a, b) {
        if ("string" == typeof a) {
            var c = this._listeners;
            if (!c || !c[a]) return !1;
            a = new createjs.Event(a);
        }
        if (a.target = b || this, a.bubbles && this.parent) {
            for (var d = this, e = [ d ]; d.parent; ) e.push(d = d.parent);
            var f, g = e.length;
            for (f = g - 1; f >= 0 && !a.propagationStopped; f--) e[f]._dispatchEvent(a, 1 + (0 == f));
            for (f = 1; g > f && !a.propagationStopped; f++) e[f]._dispatchEvent(a, 3);
        } else this._dispatchEvent(a, 2);
        return a.defaultPrevented;
    }, b.hasEventListener = function(a) {
        var b = this._listeners, c = this._captureListeners;
        return !!(b && b[a] || c && c[a]);
    }, b.willTrigger = function(a) {
        for (var b = this; b; ) {
            if (b.hasEventListener(a)) return !0;
            b = b.parent;
        }
        return !1;
    }, b.toString = function() {
        return "[EventDispatcher]";
    }, b._dispatchEvent = function(a, b) {
        var c, d = 1 == b ? this._captureListeners : this._listeners;
        if (a && d) {
            var e = d[a.type];
            if (!e || !(c = e.length)) return;
            a.currentTarget = this, a.eventPhase = b, a.removed = !1, e = e.slice();
            for (var f = 0; c > f && !a.immediatePropagationStopped; f++) {
                var g = e[f];
                g.handleEvent ? g.handleEvent(a) : g(a), a.removed && (this.off(a.type, g, 1 == b), 
                a.removed = !1);
            }
        }
    }, createjs.EventDispatcher = a;
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    createjs.indexOf = function(a, b) {
        for (var c = 0, d = a.length; d > c; c++) if (b === a[c]) return c;
        return -1;
    };
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    createjs.proxy = function(a, b) {
        var c = Array.prototype.slice.call(arguments, 2);
        return function() {
            return a.apply(b, Array.prototype.slice.call(arguments, 0).concat(c));
        };
    };
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function() {
        this.init();
    };
    a.prototype = new createjs.EventDispatcher();
    var b = a.prototype, c = a;
    c.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?)|(.{0,2}\/{1}))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/, 
    c.PATH_PATTERN = /^(?:(\w+:)\/{2})|(.{0,2}\/{1})?([/.]*?(?:[^?]+)?\/?)?$/, b.loaded = !1, 
    b.canceled = !1, b.progress = 0, b._item = null, b.getItem = function() {
        return this._item;
    }, b.init = function() {}, b.load = function() {}, b.close = function() {}, b._sendLoadStart = function() {
        this._isCanceled() || this.dispatchEvent("loadstart");
    }, b._sendProgress = function(a) {
        if (!this._isCanceled()) {
            var b = null;
            "number" == typeof a ? (this.progress = a, b = new createjs.Event("progress"), b.loaded = this.progress, 
            b.total = 1) : (b = a, this.progress = a.loaded / a.total, (isNaN(this.progress) || 1 / 0 == this.progress) && (this.progress = 0)), 
            b.progress = this.progress, this.hasEventListener("progress") && this.dispatchEvent(b);
        }
    }, b._sendComplete = function() {
        this._isCanceled() || this.dispatchEvent("complete");
    }, b._sendError = function(a) {
        !this._isCanceled() && this.hasEventListener("error") && (null == a && (a = new createjs.Event("error")), 
        this.dispatchEvent(a));
    }, b._isCanceled = function() {
        return null == window.createjs || this.canceled ? !0 : !1;
    }, b._parseURI = function(a) {
        return a ? a.match(c.FILE_PATTERN) : null;
    }, b._parsePath = function(a) {
        return a ? a.match(c.PATH_PATTERN) : null;
    }, b._formatQueryString = function(a, b) {
        if (null == a) throw new Error("You must specify data.");
        var c = [];
        for (var d in a) c.push(d + "=" + escape(a[d]));
        return b && (c = c.concat(b)), c.join("&");
    }, b.buildPath = function(a, b) {
        if (null == b) return a;
        var c = [], d = a.indexOf("?");
        if (-1 != d) {
            var e = a.slice(d + 1);
            c = c.concat(e.split("&"));
        }
        return -1 != d ? a.slice(0, d) + "?" + this._formatQueryString(b, c) : a + "?" + this._formatQueryString(b, c);
    }, b._isCrossDomain = function(a) {
        var b = document.createElement("a");
        b.href = a.src;
        var c = document.createElement("a");
        c.href = location.href;
        var d = "" != b.hostname && (b.port != c.port || b.protocol != c.protocol || b.hostname != c.hostname);
        return d;
    }, b._isLocal = function(a) {
        var b = document.createElement("a");
        return b.href = a.src, "" == b.hostname && "file:" == b.protocol;
    }, b.toString = function() {
        return "[PreloadJS AbstractLoader]";
    }, createjs.AbstractLoader = a;
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function(a, b, c) {
        this.init(a, b, c);
    }, b = a.prototype = new createjs.AbstractLoader(), c = a;
    c.loadTimeout = 8e3, c.LOAD_TIMEOUT = 0, c.BINARY = "binary", c.CSS = "css", c.IMAGE = "image", 
    c.JAVASCRIPT = "javascript", c.JSON = "json", c.JSONP = "jsonp", c.MANIFEST = "manifest", 
    c.SOUND = "sound", c.SVG = "svg", c.TEXT = "text", c.XML = "xml", c.POST = "POST", 
    c.GET = "GET", b._basePath = null, b._crossOrigin = "", b.useXHR = !0, b.stopOnError = !1, 
    b.maintainScriptOrder = !0, b.next = null, b._typeCallbacks = null, b._extensionCallbacks = null, 
    b._loadStartWasDispatched = !1, b._maxConnections = 1, b._currentlyLoadingScript = null, 
    b._currentLoads = null, b._loadQueue = null, b._loadQueueBackup = null, b._loadItemsById = null, 
    b._loadItemsBySrc = null, b._loadedResults = null, b._loadedRawResults = null, b._numItems = 0, 
    b._numItemsLoaded = 0, b._scriptOrder = null, b._loadedScripts = null, b.init = function(a, b, c) {
        this._numItems = this._numItemsLoaded = 0, this._paused = !1, this._loadStartWasDispatched = !1, 
        this._currentLoads = [], this._loadQueue = [], this._loadQueueBackup = [], this._scriptOrder = [], 
        this._loadedScripts = [], this._loadItemsById = {}, this._loadItemsBySrc = {}, this._loadedResults = {}, 
        this._loadedRawResults = {}, this._typeCallbacks = {}, this._extensionCallbacks = {}, 
        this._basePath = b, this.setUseXHR(a), this._crossOrigin = c === !0 ? "Anonymous" : c === !1 || null == c ? "" : c;
    }, b.setUseXHR = function(a) {
        return this.useXHR = 0 != a && null != window.XMLHttpRequest, this.useXHR;
    }, b.removeAll = function() {
        this.remove();
    }, b.remove = function(a) {
        var b = null;
        if (!a || a instanceof Array) {
            if (a) b = a; else if (arguments.length > 0) return;
        } else b = [ a ];
        var c = !1;
        if (b) {
            for (;b.length; ) {
                var d = b.pop(), e = this.getResult(d);
                for (f = this._loadQueue.length - 1; f >= 0; f--) if (g = this._loadQueue[f].getItem(), 
                g.id == d || g.src == d) {
                    this._loadQueue.splice(f, 1)[0].cancel();
                    break;
                }
                for (f = this._loadQueueBackup.length - 1; f >= 0; f--) if (g = this._loadQueueBackup[f].getItem(), 
                g.id == d || g.src == d) {
                    this._loadQueueBackup.splice(f, 1)[0].cancel();
                    break;
                }
                if (e) delete this._loadItemsById[e.id], delete this._loadItemsBySrc[e.src], this._disposeItem(e); else for (var f = this._currentLoads.length - 1; f >= 0; f--) {
                    var g = this._currentLoads[f].getItem();
                    if (g.id == d || g.src == d) {
                        this._currentLoads.splice(f, 1)[0].cancel(), c = !0;
                        break;
                    }
                }
            }
            c && this._loadNext();
        } else {
            this.close();
            for (var h in this._loadItemsById) this._disposeItem(this._loadItemsById[h]);
            this.init(this.useXHR);
        }
    }, b.reset = function() {
        this.close();
        for (var a in this._loadItemsById) this._disposeItem(this._loadItemsById[a]);
        for (var b = [], c = 0, d = this._loadQueueBackup.length; d > c; c++) b.push(this._loadQueueBackup[c].getItem());
        this.loadManifest(b, !1);
    }, c.isBinary = function(a) {
        switch (a) {
          case createjs.LoadQueue.IMAGE:
          case createjs.LoadQueue.BINARY:
            return !0;

          default:
            return !1;
        }
    }, c.isText = function(a) {
        switch (a) {
          case createjs.LoadQueue.TEXT:
          case createjs.LoadQueue.JSON:
          case createjs.LoadQueue.MANIFEST:
          case createjs.LoadQueue.XML:
          case createjs.LoadQueue.HTML:
          case createjs.LoadQueue.CSS:
          case createjs.LoadQueue.SVG:
          case createjs.LoadQueue.JAVASCRIPT:
            return !0;

          default:
            return !1;
        }
    }, b.installPlugin = function(a) {
        if (null != a && null != a.getPreloadHandlers) {
            var b = a.getPreloadHandlers();
            if (b.scope = a, null != b.types) for (var c = 0, d = b.types.length; d > c; c++) this._typeCallbacks[b.types[c]] = b;
            if (null != b.extensions) for (c = 0, d = b.extensions.length; d > c; c++) this._extensionCallbacks[b.extensions[c]] = b;
        }
    }, b.setMaxConnections = function(a) {
        this._maxConnections = a, !this._paused && this._loadQueue.length > 0 && this._loadNext();
    }, b.loadFile = function(a, b, c) {
        if (null == a) {
            var d = new createjs.Event("error");
            return d.text = "PRELOAD_NO_FILE", this._sendError(d), void 0;
        }
        this._addItem(a, null, c), b !== !1 ? this.setPaused(!1) : this.setPaused(!0);
    }, b.loadManifest = function(a, b, d) {
        var e = null, f = null;
        if (a instanceof Array) {
            if (0 == a.length) {
                var g = new createjs.Event("error");
                return g.text = "PRELOAD_MANIFEST_EMPTY", this._sendError(g), void 0;
            }
            e = a;
        } else if ("string" == typeof a) e = [ {
            src: a,
            type: c.MANIFEST
        } ]; else {
            if ("object" != typeof a) {
                var g = new createjs.Event("error");
                return g.text = "PRELOAD_MANIFEST_NULL", this._sendError(g), void 0;
            }
            if (void 0 !== a.src) {
                if (null == a.type) a.type = c.MANIFEST; else if (a.type != c.MANIFEST) {
                    var g = new createjs.Event("error");
                    g.text = "PRELOAD_MANIFEST_ERROR", this._sendError(g);
                }
                e = [ a ];
            } else void 0 !== a.manifest && (e = a.manifest, f = a.path);
        }
        for (var h = 0, i = e.length; i > h; h++) this._addItem(e[h], f, d);
        b !== !1 ? this.setPaused(!1) : this.setPaused(!0);
    }, b.load = function() {
        this.setPaused(!1);
    }, b.getItem = function(a) {
        return this._loadItemsById[a] || this._loadItemsBySrc[a];
    }, b.getResult = function(a, b) {
        var c = this._loadItemsById[a] || this._loadItemsBySrc[a];
        if (null == c) return null;
        var d = c.id;
        return b && this._loadedRawResults[d] ? this._loadedRawResults[d] : this._loadedResults[d];
    }, b.setPaused = function(a) {
        this._paused = a, this._paused || this._loadNext();
    }, b.close = function() {
        for (;this._currentLoads.length; ) this._currentLoads.pop().cancel();
        this._scriptOrder.length = 0, this._loadedScripts.length = 0, this.loadStartWasDispatched = !1;
    }, b._addItem = function(a, b, c) {
        var d = this._createLoadItem(a, b, c);
        if (null != d) {
            var e = this._createLoader(d);
            null != e && (this._loadQueue.push(e), this._loadQueueBackup.push(e), this._numItems++, 
            this._updateProgress(), this.maintainScriptOrder && d.type == createjs.LoadQueue.JAVASCRIPT && e instanceof createjs.XHRLoader && (this._scriptOrder.push(d), 
            this._loadedScripts.push(null)));
        }
    }, b._createLoadItem = function(a, b, c) {
        var d = null;
        switch (typeof a) {
          case "string":
            d = {
                src: a
            };
            break;

          case "object":
            d = window.HTMLAudioElement && a instanceof window.HTMLAudioElement ? {
                tag: a,
                src: d.tag.src,
                type: createjs.LoadQueue.SOUND
            } : a;
            break;

          default:
            return null;
        }
        var e = this._parseURI(d.src);
        null != e && (d.ext = e[6]), null == d.type && (d.type = this._getTypeByExtension(d.ext));
        var f = "", g = c || this._basePath, h = d.src;
        if (e && null == e[1] && null == e[3]) if (b) {
            f = b;
            var i = this._parsePath(b);
            h = b + h, null != g && i && null == i[1] && null == i[2] && (f = g + f);
        } else null != g && (f = g);
        if (d.src = f + d.src, d.path = f, (d.type == createjs.LoadQueue.JSON || d.type == createjs.LoadQueue.MANIFEST) && (d._loadAsJSONP = null != d.callback), 
        d.type == createjs.LoadQueue.JSONP && null == d.callback) throw new Error("callback is required for loading JSONP requests.");
        (void 0 === d.tag || null === d.tag) && (d.tag = this._createTag(d)), (void 0 === d.id || null === d.id || "" === d.id) && (d.id = h);
        var j = this._typeCallbacks[d.type] || this._extensionCallbacks[d.ext];
        if (j) {
            var k = j.callback.call(j.scope, d.src, d.type, d.id, d.data, f, this);
            if (k === !1) return null;
            k === !0 || (null != k.src && (d.src = k.src), null != k.id && (d.id = k.id), null != k.tag && (d.tag = k.tag), 
            null != k.completeHandler && (d.completeHandler = k.completeHandler), k.type && (d.type = k.type), 
            e = this._parseURI(d.src), null != e && null != e[6] && (d.ext = e[6].toLowerCase()));
        }
        return this._loadItemsById[d.id] = d, this._loadItemsBySrc[d.src] = d, d;
    }, b._createLoader = function(a) {
        var b = this.useXHR;
        switch (a.type) {
          case createjs.LoadQueue.JSON:
          case createjs.LoadQueue.MANIFEST:
            b = !a._loadAsJSONP;
            break;

          case createjs.LoadQueue.XML:
          case createjs.LoadQueue.TEXT:
            b = !0;
            break;

          case createjs.LoadQueue.SOUND:
          case createjs.LoadQueue.JSONP:
            b = !1;
            break;

          case null:
            return null;
        }
        return b ? new createjs.XHRLoader(a, this._crossOrigin) : new createjs.TagLoader(a);
    }, b._loadNext = function() {
        if (!this._paused) {
            this._loadStartWasDispatched || (this._sendLoadStart(), this._loadStartWasDispatched = !0), 
            this._numItems == this._numItemsLoaded ? (this.loaded = !0, this._sendComplete(), 
            this.next && this.next.load && this.next.load()) : this.loaded = !1;
            for (var a = 0; a < this._loadQueue.length && !(this._currentLoads.length >= this._maxConnections); a++) {
                var b = this._loadQueue[a];
                if (this.maintainScriptOrder && b instanceof createjs.TagLoader && b.getItem().type == createjs.LoadQueue.JAVASCRIPT) {
                    if (this._currentlyLoadingScript) continue;
                    this._currentlyLoadingScript = !0;
                }
                this._loadQueue.splice(a, 1), a--, this._loadItem(b);
            }
        }
    }, b._loadItem = function(a) {
        a.on("progress", this._handleProgress, this), a.on("complete", this._handleFileComplete, this), 
        a.on("error", this._handleFileError, this), this._currentLoads.push(a), this._sendFileStart(a.getItem()), 
        a.load();
    }, b._handleFileError = function(a) {
        var b = a.target;
        this._numItemsLoaded++, this._updateProgress();
        var c = new createjs.Event("error");
        c.text = "FILE_LOAD_ERROR", c.item = b.getItem(), this._sendError(c), this.stopOnError || (this._removeLoadItem(b), 
        this._loadNext());
    }, b._handleFileComplete = function(a) {
        var b = a.target, c = b.getItem();
        if (this._loadedResults[c.id] = b.getResult(), b instanceof createjs.XHRLoader && (this._loadedRawResults[c.id] = b.getResult(!0)), 
        this._removeLoadItem(b), this.maintainScriptOrder && c.type == createjs.LoadQueue.JAVASCRIPT) {
            if (!(b instanceof createjs.TagLoader)) return this._loadedScripts[createjs.indexOf(this._scriptOrder, c)] = c, 
            this._checkScriptLoadOrder(b), void 0;
            this._currentlyLoadingScript = !1;
        }
        if (delete c._loadAsJSONP, c.type == createjs.LoadQueue.MANIFEST) {
            var d = b.getResult();
            null != d && void 0 !== d.manifest && this.loadManifest(d, !0);
        }
        this._processFinishedLoad(c, b);
    }, b._processFinishedLoad = function(a, b) {
        this._numItemsLoaded++, this._updateProgress(), this._sendFileComplete(a, b), this._loadNext();
    }, b._checkScriptLoadOrder = function() {
        for (var a = this._loadedScripts.length, b = 0; a > b; b++) {
            var c = this._loadedScripts[b];
            if (null === c) break;
            if (c !== !0) {
                var d = this._loadedResults[c.id];
                (document.body || document.getElementsByTagName("body")[0]).appendChild(d), this._processFinishedLoad(c), 
                this._loadedScripts[b] = !0;
            }
        }
    }, b._removeLoadItem = function(a) {
        for (var b = this._currentLoads.length, c = 0; b > c; c++) if (this._currentLoads[c] == a) {
            this._currentLoads.splice(c, 1);
            break;
        }
    }, b._handleProgress = function(a) {
        var b = a.target;
        this._sendFileProgress(b.getItem(), b.progress), this._updateProgress();
    }, b._updateProgress = function() {
        var a = this._numItemsLoaded / this._numItems, b = this._numItems - this._numItemsLoaded;
        if (b > 0) {
            for (var c = 0, d = 0, e = this._currentLoads.length; e > d; d++) c += this._currentLoads[d].progress;
            a += c / b * (b / this._numItems);
        }
        this._sendProgress(a);
    }, b._disposeItem = function(a) {
        delete this._loadedResults[a.id], delete this._loadedRawResults[a.id], delete this._loadItemsById[a.id], 
        delete this._loadItemsBySrc[a.src];
    }, b._createTag = function(a) {
        var b = null;
        switch (a.type) {
          case createjs.LoadQueue.IMAGE:
            return b = document.createElement("img"), "" == this._crossOrigin || this._isLocal(a) || (b.crossOrigin = this._crossOrigin), 
            b;

          case createjs.LoadQueue.SOUND:
            return b = document.createElement("audio"), b.autoplay = !1, b;

          case createjs.LoadQueue.JSON:
          case createjs.LoadQueue.JSONP:
          case createjs.LoadQueue.JAVASCRIPT:
          case createjs.LoadQueue.MANIFEST:
            return b = document.createElement("script"), b.type = "text/javascript", b;

          case createjs.LoadQueue.CSS:
            return b = this.useXHR ? document.createElement("style") : document.createElement("link"), 
            b.rel = "stylesheet", b.type = "text/css", b;

          case createjs.LoadQueue.SVG:
            return this.useXHR ? b = document.createElement("svg") : (b = document.createElement("object"), 
            b.type = "image/svg+xml"), b;
        }
        return null;
    }, b._getTypeByExtension = function(a) {
        if (null == a) return createjs.LoadQueue.TEXT;
        switch (a.toLowerCase()) {
          case "jpeg":
          case "jpg":
          case "gif":
          case "png":
          case "webp":
          case "bmp":
            return createjs.LoadQueue.IMAGE;

          case "ogg":
          case "mp3":
          case "wav":
            return createjs.LoadQueue.SOUND;

          case "json":
            return createjs.LoadQueue.JSON;

          case "xml":
            return createjs.LoadQueue.XML;

          case "css":
            return createjs.LoadQueue.CSS;

          case "js":
            return createjs.LoadQueue.JAVASCRIPT;

          case "svg":
            return createjs.LoadQueue.SVG;

          default:
            return createjs.LoadQueue.TEXT;
        }
    }, b._sendFileProgress = function(a, b) {
        if (this._isCanceled()) return this._cleanUp(), void 0;
        if (this.hasEventListener("fileprogress")) {
            var c = new createjs.Event("fileprogress");
            c.progress = b, c.loaded = b, c.total = 1, c.item = a, this.dispatchEvent(c);
        }
    }, b._sendFileComplete = function(a, b) {
        if (!this._isCanceled()) {
            var c = new createjs.Event("fileload");
            c.loader = b, c.item = a, c.result = this._loadedResults[a.id], c.rawResult = this._loadedRawResults[a.id], 
            a.completeHandler && a.completeHandler(c), this.hasEventListener("fileload") && this.dispatchEvent(c);
        }
    }, b._sendFileStart = function(a) {
        var b = new createjs.Event("filestart");
        b.item = a, this.hasEventListener("filestart") && this.dispatchEvent(b);
    }, b.toString = function() {
        return "[PreloadJS LoadQueue]";
    }, createjs.LoadQueue = a;
    var d = function() {};
    d.init = function() {
        var a = navigator.userAgent;
        d.isFirefox = a.indexOf("Firefox") > -1, d.isOpera = null != window.opera, d.isChrome = a.indexOf("Chrome") > -1, 
        d.isIOS = a.indexOf("iPod") > -1 || a.indexOf("iPhone") > -1 || a.indexOf("iPad") > -1;
    }, d.init(), createjs.LoadQueue.BrowserDetect = d;
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function(a) {
        this.init(a);
    }, b = a.prototype = new createjs.AbstractLoader();
    b._loadTimeout = null, b._tagCompleteProxy = null, b._isAudio = !1, b._tag = null, 
    b._jsonResult = null, b.init = function(a) {
        this._item = a, this._tag = a.tag, this._isAudio = window.HTMLAudioElement && a.tag instanceof window.HTMLAudioElement, 
        this._tagCompleteProxy = createjs.proxy(this._handleLoad, this);
    }, b.getResult = function() {
        return this._item.type == createjs.LoadQueue.JSONP || this._item.type == createjs.LoadQueue.MANIFEST ? this._jsonResult : this._tag;
    }, b.cancel = function() {
        this.canceled = !0, this._clean();
    }, b.load = function() {
        var a = this._item, b = this._tag;
        clearTimeout(this._loadTimeout);
        var c = createjs.LoadQueue.LOAD_TIMEOUT;
        0 == c && (c = createjs.LoadQueue.loadTimeout), this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), c), 
        this._isAudio && (b.src = null, b.preload = "auto"), b.onerror = createjs.proxy(this._handleError, this), 
        this._isAudio ? (b.onstalled = createjs.proxy(this._handleStalled, this), b.addEventListener("canplaythrough", this._tagCompleteProxy, !1)) : (b.onload = createjs.proxy(this._handleLoad, this), 
        b.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this));
        var d = this.buildPath(a.src, a.values);
        switch (a.type) {
          case createjs.LoadQueue.CSS:
            b.href = d;
            break;

          case createjs.LoadQueue.SVG:
            b.data = d;
            break;

          default:
            b.src = d;
        }
        if (a.type == createjs.LoadQueue.JSONP || a.type == createjs.LoadQueue.JSON || a.type == createjs.LoadQueue.MANIFEST) {
            if (null == a.callback) throw new Error("callback is required for loading JSONP requests.");
            if (null != window[a.callback]) throw new Error('JSONP callback "' + a.callback + '" already exists on window. You need to specify a different callback. Or re-name the current one.');
            window[a.callback] = createjs.proxy(this._handleJSONPLoad, this);
        }
        (a.type == createjs.LoadQueue.SVG || a.type == createjs.LoadQueue.JSONP || a.type == createjs.LoadQueue.JSON || a.type == createjs.LoadQueue.MANIFEST || a.type == createjs.LoadQueue.JAVASCRIPT || a.type == createjs.LoadQueue.CSS) && (this._startTagVisibility = b.style.visibility, 
        b.style.visibility = "hidden", (document.body || document.getElementsByTagName("body")[0]).appendChild(b)), 
        null != b.load && b.load();
    }, b._handleJSONPLoad = function(a) {
        this._jsonResult = a;
    }, b._handleTimeout = function() {
        this._clean();
        var a = new createjs.Event("error");
        a.text = "PRELOAD_TIMEOUT", this._sendError(a);
    }, b._handleStalled = function() {}, b._handleError = function() {
        this._clean();
        var a = new createjs.Event("error");
        this._sendError(a);
    }, b._handleReadyStateChange = function() {
        clearTimeout(this._loadTimeout);
        var a = this.getItem().tag;
        ("loaded" == a.readyState || "complete" == a.readyState) && this._handleLoad();
    }, b._handleLoad = function() {
        if (!this._isCanceled()) {
            var a = this.getItem(), b = a.tag;
            if (!(this.loaded || this._isAudio && 4 !== b.readyState)) {
                switch (this.loaded = !0, a.type) {
                  case createjs.LoadQueue.SVG:
                  case createjs.LoadQueue.JSON:
                  case createjs.LoadQueue.JSONP:
                  case createjs.LoadQueue.MANIFEST:
                  case createjs.LoadQueue.CSS:
                    b.style.visibility = this._startTagVisibility, (document.body || document.getElementsByTagName("body")[0]).removeChild(b);
                }
                this._clean(), this._sendComplete();
            }
        }
    }, b._clean = function() {
        clearTimeout(this._loadTimeout);
        var a = this.getItem(), b = a.tag;
        null != b && (b.onload = null, b.removeEventListener && b.removeEventListener("canplaythrough", this._tagCompleteProxy, !1), 
        b.onstalled = null, b.onprogress = null, b.onerror = null, null != b.parentNode && a.type == createjs.LoadQueue.SVG && a.type == createjs.LoadQueue.JSON && a.type == createjs.LoadQueue.MANIFEST && a.type == createjs.LoadQueue.CSS && a.type == createjs.LoadQueue.JSONP && b.parentNode.removeChild(b));
        var a = this.getItem();
        (a.type == createjs.LoadQueue.JSONP || a.type == createjs.LoadQueue.MANIFEST) && (window[a.callback] = null);
    }, b.toString = function() {
        return "[PreloadJS TagLoader]";
    }, createjs.TagLoader = a;
}(), this.createjs = this.createjs || {}, function() {
    "use strict";
    var a = function(a, b) {
        this.init(a, b);
    }, b = a.prototype = new createjs.AbstractLoader();
    b._request = null, b._loadTimeout = null, b._xhrLevel = 1, b._response = null, b._rawResponse = null, 
    b._crossOrigin = "", b.init = function(a, b) {
        this._item = a, this._crossOrigin = b, !this._createXHR(a);
    }, b.getResult = function(a) {
        return a && this._rawResponse ? this._rawResponse : this._response;
    }, b.cancel = function() {
        this.canceled = !0, this._clean(), this._request.abort();
    }, b.load = function() {
        if (null == this._request) return this._handleError(), void 0;
        if (this._request.onloadstart = createjs.proxy(this._handleLoadStart, this), this._request.onprogress = createjs.proxy(this._handleProgress, this), 
        this._request.onabort = createjs.proxy(this._handleAbort, this), this._request.onerror = createjs.proxy(this._handleError, this), 
        this._request.ontimeout = createjs.proxy(this._handleTimeout, this), 1 == this._xhrLevel) {
            var a = createjs.LoadQueue.LOAD_TIMEOUT;
            if (0 == a) a = createjs.LoadQueue.loadTimeout; else try {
                console.warn("LoadQueue.LOAD_TIMEOUT has been deprecated in favor of LoadQueue.loadTimeout");
            } catch (b) {}
            this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), a);
        }
        this._request.onload = createjs.proxy(this._handleLoad, this), this._request.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);
        try {
            this._item.values && this._item.method != createjs.LoadQueue.GET ? this._item.method == createjs.LoadQueue.POST && this._request.send(this._formatQueryString(this._item.values)) : this._request.send();
        } catch (c) {
            var d = new createjs.Event("error");
            d.error = c, this._sendError(d);
        }
    }, b.getAllResponseHeaders = function() {
        return this._request.getAllResponseHeaders instanceof Function ? this._request.getAllResponseHeaders() : null;
    }, b.getResponseHeader = function(a) {
        return this._request.getResponseHeader instanceof Function ? this._request.getResponseHeader(a) : null;
    }, b._handleProgress = function(a) {
        if (a && !(a.loaded > 0 && 0 == a.total)) {
            var b = new createjs.Event("progress");
            b.loaded = a.loaded, b.total = a.total, this._sendProgress(b);
        }
    }, b._handleLoadStart = function() {
        clearTimeout(this._loadTimeout), this._sendLoadStart();
    }, b._handleAbort = function() {
        this._clean();
        var a = new createjs.Event("error");
        a.text = "XHR_ABORTED", this._sendError(a);
    }, b._handleError = function() {
        this._clean();
        var a = new createjs.Event("error");
        this._sendError(a);
    }, b._handleReadyStateChange = function() {
        4 == this._request.readyState && this._handleLoad();
    }, b._handleLoad = function() {
        if (!this.loaded) {
            if (this.loaded = !0, !this._checkError()) return this._handleError(), void 0;
            this._response = this._getResponse(), this._clean();
            var a = this._generateTag();
            a && this._sendComplete();
        }
    }, b._handleTimeout = function(a) {
        this._clean();
        var b = new createjs.Event("error");
        b.text = "PRELOAD_TIMEOUT", this._sendError(a);
    }, b._checkError = function() {
        var a = parseInt(this._request.status);
        switch (a) {
          case 404:
          case 0:
            return !1;
        }
        return !0;
    }, b._getResponse = function() {
        if (null != this._response) return this._response;
        if (null != this._request.response) return this._request.response;
        try {
            if (null != this._request.responseText) return this._request.responseText;
        } catch (a) {}
        try {
            if (null != this._request.responseXML) return this._request.responseXML;
        } catch (a) {}
        return null;
    }, b._createXHR = function(a) {
        var b = this._isCrossDomain(a), c = null;
        if (b && window.XDomainRequest) c = new XDomainRequest(); else if (window.XMLHttpRequest) c = new XMLHttpRequest(); else try {
            c = new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (d) {
            try {
                c = new ActiveXObject("Msxml2.XMLHTTP.3.0");
            } catch (d) {
                try {
                    c = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (d) {
                    return !1;
                }
            }
        }
        createjs.LoadQueue.isText(a.type) && c.overrideMimeType && c.overrideMimeType("text/plain; charset=utf-8"), 
        this._xhrLevel = "string" == typeof c.responseType ? 2 : 1;
        var e = null;
        return e = a.method == createjs.LoadQueue.GET ? this.buildPath(a.src, a.values) : a.src, 
        c.open(a.method || createjs.LoadQueue.GET, e, !0), b && c instanceof XMLHttpRequest && 1 == this._xhrLevel && c.setRequestHeader("Origin", location.origin), 
        a.values && a.method == createjs.LoadQueue.POST && c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), 
        createjs.LoadQueue.isBinary(a.type) && (c.responseType = "arraybuffer"), this._request = c, 
        !0;
    }, b._clean = function() {
        clearTimeout(this._loadTimeout);
        var a = this._request;
        a.onloadstart = null, a.onprogress = null, a.onabort = null, a.onerror = null, a.onload = null, 
        a.ontimeout = null, a.onloadend = null, a.onreadystatechange = null;
    }, b._generateTag = function() {
        var a = this._item.type, b = this._item.tag;
        switch (a) {
          case createjs.LoadQueue.IMAGE:
            return b.onload = createjs.proxy(this._handleTagReady, this), "" != this._crossOrigin && (b.crossOrigin = "Anonymous"), 
            b.src = this.buildPath(this._item.src, this._item.values), this._rawResponse = this._response, 
            this._response = b, !1;

          case createjs.LoadQueue.JAVASCRIPT:
            return b = document.createElement("script"), b.text = this._response, this._rawResponse = this._response, 
            this._response = b, !0;

          case createjs.LoadQueue.CSS:
            var c = document.getElementsByTagName("head")[0];
            if (c.appendChild(b), b.styleSheet) b.styleSheet.cssText = this._response; else {
                var d = document.createTextNode(this._response);
                b.appendChild(d);
            }
            return this._rawResponse = this._response, this._response = b, !0;

          case createjs.LoadQueue.XML:
            var e = this._parseXML(this._response, "text/xml");
            return this._rawResponse = this._response, this._response = e, !0;

          case createjs.LoadQueue.SVG:
            var e = this._parseXML(this._response, "image/svg+xml");
            return this._rawResponse = this._response, null != e.documentElement ? (b.appendChild(e.documentElement), 
            this._response = b) : this._response = e, !0;

          case createjs.LoadQueue.JSON:
          case createjs.LoadQueue.MANIFEST:
            var f = {};
            try {
                f = JSON.parse(this._response);
            } catch (g) {
                f = g;
            }
            return this._rawResponse = this._response, this._response = f, !0;
        }
        return !0;
    }, b._parseXML = function(a, b) {
        var c = null;
        try {
            if (window.DOMParser) {
                var d = new DOMParser();
                c = d.parseFromString(a, b);
            } else c = new ActiveXObject("Microsoft.XMLDOM"), c.async = !1, c.loadXML(a);
        } catch (e) {}
        return c;
    }, b._handleTagReady = function() {
        this._sendComplete();
    }, b.toString = function() {
        return "[PreloadJS XHRLoader]";
    }, createjs.XHRLoader = a;
}(), "object" != typeof JSON && (JSON = {}), function() {
    "use strict";
    function f(a) {
        return 10 > a ? "0" + a : a;
    }
    function quote(a) {
        return escapable.lastIndex = 0, escapable.test(a) ? '"' + a.replace(escapable, function(a) {
            var b = meta[a];
            return "string" == typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + a + '"';
    }
    function str(a, b) {
        var c, d, e, f, g, h = gap, i = b[a];
        switch (i && "object" == typeof i && "function" == typeof i.toJSON && (i = i.toJSON(a)), 
        "function" == typeof rep && (i = rep.call(b, a, i)), typeof i) {
          case "string":
            return quote(i);

          case "number":
            return isFinite(i) ? String(i) : "null";

          case "boolean":
          case "null":
            return String(i);

          case "object":
            if (!i) return "null";
            if (gap += indent, g = [], "[object Array]" === Object.prototype.toString.apply(i)) {
                for (f = i.length, c = 0; f > c; c += 1) g[c] = str(c, i) || "null";
                return e = 0 === g.length ? "[]" : gap ? "[\n" + gap + g.join(",\n" + gap) + "\n" + h + "]" : "[" + g.join(",") + "]", 
                gap = h, e;
            }
            if (rep && "object" == typeof rep) for (f = rep.length, c = 0; f > c; c += 1) "string" == typeof rep[c] && (d = rep[c], 
            e = str(d, i), e && g.push(quote(d) + (gap ? ": " : ":") + e)); else for (d in i) Object.prototype.hasOwnProperty.call(i, d) && (e = str(d, i), 
            e && g.push(quote(d) + (gap ? ": " : ":") + e));
            return e = 0 === g.length ? "{}" : gap ? "{\n" + gap + g.join(",\n" + gap) + "\n" + h + "}" : "{" + g.join(",") + "}", 
            gap = h, e;
        }
    }
    "function" != typeof Date.prototype.toJSON && (Date.prototype.toJSON = function() {
        return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
    }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
        return this.valueOf();
    });
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, rep;
    "function" != typeof JSON.stringify && (JSON.stringify = function(a, b, c) {
        var d;
        if (gap = "", indent = "", "number" == typeof c) for (d = 0; c > d; d += 1) indent += " "; else "string" == typeof c && (indent = c);
        if (rep = b, b && "function" != typeof b && ("object" != typeof b || "number" != typeof b.length)) throw new Error("JSON.stringify");
        return str("", {
            "": a
        });
    }), "function" != typeof JSON.parse && (JSON.parse = function(text, reviver) {
        function walk(a, b) {
            var c, d, e = a[b];
            if (e && "object" == typeof e) for (c in e) Object.prototype.hasOwnProperty.call(e, c) && (d = walk(e, c), 
            void 0 !== d ? e[c] = d : delete e[c]);
            return reviver.call(a, b, e);
        }
        var j;
        if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"), 
        "function" == typeof reviver ? walk({
            "": j
        }, "") : j;
        throw new SyntaxError("JSON.parse");
    });
}();

(function($) {
    $.transit = {
        version: "0.9.9",
        propertyMap: {
            marginLeft: "margin",
            marginRight: "margin",
            marginBottom: "margin",
            marginTop: "margin",
            paddingLeft: "padding",
            paddingRight: "padding",
            paddingBottom: "padding",
            paddingTop: "padding"
        },
        enabled: true,
        useTransitionEnd: false
    };
    var div = document.createElement("div");
    var support = {};
    function getVendorPropertyName(prop) {
        if (prop in div.style) return prop;
        var prefixes = [ "Moz", "Webkit", "O", "ms" ];
        var prop_ = prop.charAt(0).toUpperCase() + prop.substr(1);
        if (prop in div.style) {
            return prop;
        }
        for (var i = 0; i < prefixes.length; ++i) {
            var vendorProp = prefixes[i] + prop_;
            if (vendorProp in div.style) {
                return vendorProp;
            }
        }
    }
    function checkTransform3dSupport() {
        div.style[support.transform] = "";
        div.style[support.transform] = "rotateY(90deg)";
        return div.style[support.transform] !== "";
    }
    var isChrome = navigator.userAgent.toLowerCase().indexOf("chrome") > -1;
    support.transition = getVendorPropertyName("transition");
    support.transitionDelay = getVendorPropertyName("transitionDelay");
    support.transform = getVendorPropertyName("transform");
    support.transformOrigin = getVendorPropertyName("transformOrigin");
    support.transform3d = checkTransform3dSupport();
    var eventNames = {
        transition: "transitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        WebkitTransition: "webkitTransitionEnd",
        msTransition: "MSTransitionEnd"
    };
    var transitionEnd = support.transitionEnd = eventNames[support.transition] || null;
    for (var key in support) {
        if (support.hasOwnProperty(key) && typeof $.support[key] === "undefined") {
            $.support[key] = support[key];
        }
    }
    div = null;
    $.cssEase = {
        _default: "ease",
        "in": "ease-in",
        out: "ease-out",
        "in-out": "ease-in-out",
        snap: "cubic-bezier(0,1,.5,1)",
        easeOutCubic: "cubic-bezier(.215,.61,.355,1)",
        easeInOutCubic: "cubic-bezier(.645,.045,.355,1)",
        easeInCirc: "cubic-bezier(.6,.04,.98,.335)",
        easeOutCirc: "cubic-bezier(.075,.82,.165,1)",
        easeInOutCirc: "cubic-bezier(.785,.135,.15,.86)",
        easeInExpo: "cubic-bezier(.95,.05,.795,.035)",
        easeOutExpo: "cubic-bezier(.19,1,.22,1)",
        easeInOutExpo: "cubic-bezier(1,0,0,1)",
        easeInQuad: "cubic-bezier(.55,.085,.68,.53)",
        easeOutQuad: "cubic-bezier(.25,.46,.45,.94)",
        easeInOutQuad: "cubic-bezier(.455,.03,.515,.955)",
        easeInQuart: "cubic-bezier(.895,.03,.685,.22)",
        easeOutQuart: "cubic-bezier(.165,.84,.44,1)",
        easeInOutQuart: "cubic-bezier(.77,0,.175,1)",
        easeInQuint: "cubic-bezier(.755,.05,.855,.06)",
        easeOutQuint: "cubic-bezier(.23,1,.32,1)",
        easeInOutQuint: "cubic-bezier(.86,0,.07,1)",
        easeInSine: "cubic-bezier(.47,0,.745,.715)",
        easeOutSine: "cubic-bezier(.39,.575,.565,1)",
        easeInOutSine: "cubic-bezier(.445,.05,.55,.95)",
        easeInBack: "cubic-bezier(.6,-.28,.735,.045)",
        easeOutBack: "cubic-bezier(.175, .885,.32,1.275)",
        easeInOutBack: "cubic-bezier(.68,-.55,.265,1.55)"
    };
    $.cssHooks["transit:transform"] = {
        get: function(elem) {
            return $(elem).data("transform") || new Transform();
        },
        set: function(elem, v) {
            var value = v;
            if (!(value instanceof Transform)) {
                value = new Transform(value);
            }
            if (support.transform === "WebkitTransform" && !isChrome) {
                elem.style[support.transform] = value.toString(true);
            } else {
                elem.style[support.transform] = value.toString();
            }
            $(elem).data("transform", value);
        }
    };
    $.cssHooks.transform = {
        set: $.cssHooks["transit:transform"].set
    };
    if ($.fn.jquery < "1.8") {
        $.cssHooks.transformOrigin = {
            get: function(elem) {
                return elem.style[support.transformOrigin];
            },
            set: function(elem, value) {
                elem.style[support.transformOrigin] = value;
            }
        };
        $.cssHooks.transition = {
            get: function(elem) {
                return elem.style[support.transition];
            },
            set: function(elem, value) {
                elem.style[support.transition] = value;
            }
        };
    }
    registerCssHook("scale");
    registerCssHook("translate");
    registerCssHook("rotate");
    registerCssHook("rotateX");
    registerCssHook("rotateY");
    registerCssHook("rotate3d");
    registerCssHook("perspective");
    registerCssHook("skewX");
    registerCssHook("skewY");
    registerCssHook("x", true);
    registerCssHook("y", true);
    function Transform(str) {
        if (typeof str === "string") {
            this.parse(str);
        }
        return this;
    }
    Transform.prototype = {
        setFromString: function(prop, val) {
            var args = typeof val === "string" ? val.split(",") : val.constructor === Array ? val : [ val ];
            args.unshift(prop);
            Transform.prototype.set.apply(this, args);
        },
        set: function(prop) {
            var args = Array.prototype.slice.apply(arguments, [ 1 ]);
            if (this.setter[prop]) {
                this.setter[prop].apply(this, args);
            } else {
                this[prop] = args.join(",");
            }
        },
        get: function(prop) {
            if (this.getter[prop]) {
                return this.getter[prop].apply(this);
            } else {
                return this[prop] || 0;
            }
        },
        setter: {
            rotate: function(theta) {
                this.rotate = unit(theta, "deg");
            },
            rotateX: function(theta) {
                this.rotateX = unit(theta, "deg");
            },
            rotateY: function(theta) {
                this.rotateY = unit(theta, "deg");
            },
            scale: function(x, y) {
                if (y === undefined) {
                    y = x;
                }
                this.scale = x + "," + y;
            },
            skewX: function(x) {
                this.skewX = unit(x, "deg");
            },
            skewY: function(y) {
                this.skewY = unit(y, "deg");
            },
            perspective: function(dist) {
                this.perspective = unit(dist, "px");
            },
            x: function(x) {
                this.set("translate", x, null);
            },
            y: function(y) {
                this.set("translate", null, y);
            },
            translate: function(x, y) {
                if (this._translateX === undefined) {
                    this._translateX = 0;
                }
                if (this._translateY === undefined) {
                    this._translateY = 0;
                }
                if (x !== null && x !== undefined) {
                    this._translateX = unit(x, "px");
                }
                if (y !== null && y !== undefined) {
                    this._translateY = unit(y, "px");
                }
                this.translate = this._translateX + "," + this._translateY;
            }
        },
        getter: {
            x: function() {
                return this._translateX || 0;
            },
            y: function() {
                return this._translateY || 0;
            },
            scale: function() {
                var s = (this.scale || "1,1").split(",");
                if (s[0]) {
                    s[0] = parseFloat(s[0]);
                }
                if (s[1]) {
                    s[1] = parseFloat(s[1]);
                }
                return s[0] === s[1] ? s[0] : s;
            },
            rotate3d: function() {
                var s = (this.rotate3d || "0,0,0,0deg").split(",");
                for (var i = 0; i <= 3; ++i) {
                    if (s[i]) {
                        s[i] = parseFloat(s[i]);
                    }
                }
                if (s[3]) {
                    s[3] = unit(s[3], "deg");
                }
                return s;
            }
        },
        parse: function(str) {
            var self = this;
            str.replace(/([a-zA-Z0-9]+)\((.*?)\)/g, function(x, prop, val) {
                self.setFromString(prop, val);
            });
        },
        toString: function(use3d) {
            var re = [];
            for (var i in this) {
                if (this.hasOwnProperty(i)) {
                    if (!support.transform3d && (i === "rotateX" || i === "rotateY" || i === "perspective" || i === "transformOrigin")) {
                        continue;
                    }
                    if (i[0] !== "_") {
                        if (use3d && i === "scale") {
                            re.push(i + "3d(" + this[i] + ",1)");
                        } else if (use3d && i === "translate") {
                            re.push(i + "3d(" + this[i] + ",0)");
                        } else {
                            re.push(i + "(" + this[i] + ")");
                        }
                    }
                }
            }
            return re.join(" ");
        }
    };
    function callOrQueue(self, queue, fn) {
        if (queue === true) {
            self.queue(fn);
        } else if (queue) {
            self.queue(queue, fn);
        } else {
            fn();
        }
    }
    function getProperties(props) {
        var re = [];
        $.each(props, function(key) {
            key = $.camelCase(key);
            key = $.transit.propertyMap[key] || $.cssProps[key] || key;
            key = uncamel(key);
            if ($.inArray(key, re) === -1) {
                re.push(key);
            }
        });
        return re;
    }
    function getTransition(properties, duration, easing, delay) {
        var props = getProperties(properties);
        if ($.cssEase[easing]) {
            easing = $.cssEase[easing];
        }
        var attribs = "" + toMS(duration) + " " + easing;
        if (parseInt(delay, 10) > 0) {
            attribs += " " + toMS(delay);
        }
        var transitions = [];
        $.each(props, function(i, name) {
            transitions.push(name + " " + attribs);
        });
        return transitions.join(", ");
    }
    $.fn.transition = $.fn.transit = function(properties, duration, easing, callback) {
        var self = this;
        var delay = 0;
        var queue = true;
        if (typeof duration === "function") {
            callback = duration;
            duration = undefined;
        }
        if (typeof easing === "function") {
            callback = easing;
            easing = undefined;
        }
        if (typeof properties.easing !== "undefined") {
            easing = properties.easing;
            delete properties.easing;
        }
        if (typeof properties.duration !== "undefined") {
            duration = properties.duration;
            delete properties.duration;
        }
        if (typeof properties.complete !== "undefined") {
            callback = properties.complete;
            delete properties.complete;
        }
        if (typeof properties.queue !== "undefined") {
            queue = properties.queue;
            delete properties.queue;
        }
        if (typeof properties.delay !== "undefined") {
            delay = properties.delay;
            delete properties.delay;
        }
        if (typeof duration === "undefined") {
            duration = $.fx.speeds._default;
        }
        if (typeof easing === "undefined") {
            easing = $.cssEase._default;
        }
        duration = toMS(duration);
        var transitionValue = getTransition(properties, duration, easing, delay);
        var work = $.transit.enabled && support.transition;
        var i = work ? parseInt(duration, 10) + parseInt(delay, 10) : 0;
        if (i === 0) {
            var fn = function(next) {
                self.css(properties);
                if (callback) {
                    callback.apply(self);
                }
                if (next) {
                    next();
                }
            };
            callOrQueue(self, queue, fn);
            return self;
        }
        var oldTransitions = {};
        var run = function(nextCall) {
            var bound = false;
            var cb = function() {
                if (bound) {
                    self.unbind(transitionEnd, cb);
                }
                if (i > 0) {
                    self.each(function() {
                        this.style[support.transition] = oldTransitions[this] || null;
                    });
                }
                if (typeof callback === "function") {
                    callback.apply(self);
                }
                if (typeof nextCall === "function") {
                    nextCall();
                }
            };
            if (i > 0 && transitionEnd && $.transit.useTransitionEnd) {
                bound = true;
                self.bind(transitionEnd, cb);
            } else {
                window.setTimeout(cb, i);
            }
            self.each(function() {
                if (i > 0) {
                    this.style[support.transition] = transitionValue;
                }
                $(this).css(properties);
            });
        };
        var deferredRun = function(next) {
            var i = 0;
            if (support.transition === "MozTransition" && i < 25) {
                i = 25;
            }
            window.setTimeout(function() {
                run(next);
            }, i);
        };
        callOrQueue(self, queue, deferredRun);
        return this;
    };
    function registerCssHook(prop, isPixels) {
        if (!isPixels) {
            $.cssNumber[prop] = true;
        }
        $.transit.propertyMap[prop] = support.transform;
        $.cssHooks[prop] = {
            get: function(elem) {
                var t = $(elem).css("transit:transform");
                return t.get(prop);
            },
            set: function(elem, value) {
                var t = $(elem).css("transit:transform");
                t.setFromString(prop, value);
                $(elem).css({
                    "transit:transform": t
                });
            }
        };
    }
    function uncamel(str) {
        return str.replace(/([A-Z])/g, function(letter) {
            return "-" + letter.toLowerCase();
        });
    }
    function unit(i, units) {
        if (typeof i === "string" && !i.match(/^[\-0-9\.]+$/)) {
            return i;
        } else {
            return "" + i + units;
        }
    }
    function toMS(duration) {
        var i = duration;
        if ($.fx.speeds[i]) {
            i = $.fx.speeds[i];
        }
        return unit(i, "ms");
    }
    $.transit.getTransitionValue = getTransition;
})(jQuery);

var DISCOVERY_MODULE = function() {
    var module = _.extend({
        collection: null,
        discoveryView: null
    }, Backbone.Events), DiscoveryModel = Backbone.Model.extend({
        currentMedia: null,
        currentMediaIndex: 0,
        initialize: function() {},
        setCurrentMediaIndex: function(index) {
            this.currentMediaIndex = index;
        },
        setCurrentMedia: function(index) {
            var cm;
            cm = this.currentMedia = this.getMediaAt(index);
            if (cm) {
                var type = this.get("type"), slug = this.get("slug"), route = VSLV_CONFIG.modules[type].route;
                if (type === "project") {
                    Backbone.history.navigate(route + "/" + slug + "/" + (this.currentMediaIndex + 1));
                }
                this.trigger("Discovery:setCurrentMedia", cm);
            }
            return cm;
        },
        setNextMedia: function() {
            this.currentMediaIndex++;
            return this.setCurrentMedia(this.currentMediaIndex);
        },
        getMediaAt: function(index) {
            try {
                if (!this.get("medias") || this.get("medias").length === 0) {
                    throw new Error("There is no media for this Discovery");
                }
            } catch (error) {
                console.log(error.message, this);
                return;
            }
            if (index > this.get("medias").length - 1) {
                return false;
            }
            return this.get("medias")[index];
        },
        getNextMedia: function() {
            this.currentMediaIndex++;
            if (this.currentMediaIndex > this.get("medias").length - 1) {
                return false;
            }
            return this.getMediaAt(this.currentMediaIndex);
        },
        getRandomMedia: function() {
            var rdm;
            rdm = Math.floor(Math.random() * this.model.get("medias").length);
            return this.getMediaAt(rdm);
        },
        getMediaSource: function(mediaObject) {
            var size = VSLV_CONFIG.discovery_wp_image_size || null, thumbnail_o = size ? mediaObject.attachment_meta.sizes[size] : undefined, source = typeof thumbnail_o !== "undefined" ? thumbnail_o.url : mediaObject.source;
            return source;
        }
    }), DiscoveryCollection = Backbone.Collection.extend({
        model: DiscoveryModel,
        currentModel: null,
        currentModelIndex: -1,
        initialize: function() {},
        next: function() {
            console.group("Next Discovery");
            if (this.currentModelIndex === this.length - 1) {
                this.resetCurrentModelIndex();
            }
            this.currentModelIndex++;
            this.setCurrentModel(this.currentModelIndex, 0);
            console.groupEnd();
            return this.currentModel;
        },
        setCurrentModel: function(indexOrModel, mediaIndex) {
            this.currentModel = typeof indexOrModel === "object" ? indexOrModel : this.at(indexOrModel);
            if (typeof mediaIndex === "number") {
                this.currentModel.setCurrentMediaIndex(mediaIndex);
            } else {
                mediaIndex = 0;
            }
            this.currentModel.setCurrentMediaIndex(mediaIndex);
            this.currentModelIndex = this.indexOf(this.currentModel);
            console.info("Discovery index: ", this.currentModelIndex + 1, "/", this.length, " - ", this.currentModel.get("slug"));
            console.info("Discovery Medias: ", this.currentModel.get("medias"));
            this.trigger("Discovery:set", this.currentModel);
            return this.currentModel;
        },
        setCurrentModelBySlug: function(slug, mediaIndex) {
            var model = this.findWhere({
                slug: slug
            });
            if (typeof model === "object") {
                return this.setCurrentModel(model, mediaIndex);
            } else {
                return false;
            }
        },
        resetCurrentModelIndex: function() {
            this.currentModelIndex = -1;
        }
    }), DiscoveryView = Backbone.View.extend({
        loadQueue: null,
        currentMedia: null,
        currentMediaIndex: 0,
        w: 0,
        h: 0,
        $c: null,
        c: null,
        ctx: null,
        $c2: null,
        c2: null,
        ctx2: null,
        $c3: null,
        c3: null,
        ctx3: null,
        events: {
            click: "next"
        },
        initialize: function() {
            this.w = this.$el.width();
            this.h = this.$el.height();
            this.$c = $("<canvas></canvas>").attr("width", this.w).attr("height", this.h);
            this.c = this.$c.get(0);
            this.ctx = this.c.getContext("2d");
            this.ctx.globalCompositeOperation = "destination-atop";
            this.$c2 = $("<canvas></canvas>").attr("width", this.w).attr("height", this.h);
            this.c2 = this.$c2.get(0);
            this.ctx2 = this.c2.getContext("2d");
            this.ctx2.globalCompositeOperation = "destination-atop";
            this.$c3 = $("<canvas></canvas>").attr("width", this.w).attr("height", this.h);
            this.c3 = this.$c3.get(0);
            this.ctx3 = this.c3.getContext("2d");
            this.ctx3.globalCompositeOperation = "copy";
            this.$el.append(this.$c);
            if (!this.model.setCurrentMedia(0)) {
                this.listenTo(this.model, "change:medias", function() {
                    this.model.setCurrentMedia(0);
                });
            }
            this.listenTo(this.collection, "Discovery:set", function(model) {
                this.stopListening(this.model);
                this.model = model;
                this.listenTo(this.model, "Discovery:setCurrentMedia", function(mediaObject) {
                    this.render();
                });
                this.model.setCurrentMedia(this.collection.currentModel.currentMediaIndex);
            });
        },
        next: function() {
            if (!this.model.setNextMedia()) {
                this.collection.next();
            }
        },
        render: function() {
            console.group("render Discovery Media");
            var cm = this.model.currentMedia;
            if (cm === null) {
                console.warn("TRYING TO RENDER DISCOVERY VIEW BUT NO CURRENT MEDIA HAS BEEN SET FOR THE CURRENT DISCOVERY MODEL");
                return;
            }
            if (cm.is_image) {
                this.renderImage(cm);
            } else if (cm.attachment_meta.mime_type.match(/video/)) {
                this.renderVideo(cm);
            } else {
                throw new Error("Current Media Type not supported: " + cm.attachment_meta.mime_type);
            }
        },
        renderImage: function(mediaObject) {
            var mediaElement, view = this;
            console.log("img: ", mediaObject.source);
            if (this.loadQueue !== null && this.loadQueue.getResult(mediaObject.slug) instanceof HTMLImageElement) {
                mediaElement = this.loadQueue.getResult(mediaObject.slug);
                this.drawMediaOnCanvas(mediaElement, this.c);
            } else {
                var _load_queue = new createjs.LoadQueue();
                _load_queue.loadFile({
                    id: mediaObject.slug,
                    src: this.model.getMediaSource(mediaObject)
                });
                _load_queue.on("fileload", function(e) {
                    console.log("fileload: ", e.item.tag);
                    mediaElement = e.item.tag;
                    this.drawMediaOnCanvas(mediaElement, this.c);
                }, this);
            }
            $(window).off("resize");
            $(window).on("resize", function() {
                view.drawMediaOnCanvas(mediaElement, view.c);
            });
            console.groupEnd();
        },
        renderVideo: function(mediaObject) {
            console.log("video: ", mediaObject.source);
            var view = this, mediaElement = $("<video></video>").attr("src", mediaObject.source).get(0);
            mediaElement.addEventListener("loadeddata", function() {
                view.drawMediaOnCanvas(mediaElement, view.c);
            });
        },
        drawMediaOnCanvas: function(mediaElement, canvasElement) {
            var m = mediaElement, c = canvasElement, ctx = c.getContext("2d"), sw = mediaElement instanceof HTMLVideoElement ? mediaElement.videoWidth : mediaElement.width, sh = mediaElement instanceof HTMLVideoElement ? mediaElement.videoHeight : mediaElement.height, scale_h = this.$el.width() / sw, scale_v = this.$el.height() / sh, scale = scale_h > scale_v ? scale_h : scale_v, dw = sw * scale, dh = sh * scale;
            c.width = c.width;
            c.width = dw;
            c.height = dh;
            ctx.drawImage(mediaElement, 0, 0, sw, sh, 0, 0, dw, dh);
            this.$el.scrollLeft((dw - this.$el.width()) / 2);
            this.$el.scrollTop((dh - this.$el.height()) / 2);
        },
        preloadAllMedias: function() {
            console.group("DiscoveryView: Preload All Medias");
            var view = this, _load_manifest = _.compact(_.uniq(_.flatten(this.collection.map(function(model) {
                var _medias = _.map(model.get("medias"), function(mediaObject, index) {
                    if (mediaObject.is_image) {
                        url = view.model.getMediaSource(mediaObject);
                        return {
                            id: mediaObject.slug,
                            src: url
                        };
                    } else {
                        return false;
                    }
                });
                return _medias;
            })), function(o) {
                return o.id;
            })), _load_queue = new createjs.LoadQueue();
            _load_queue.on("progress", function(e) {});
            _load_queue.on("fileload", function(e) {});
            _load_queue.on("complete", function(e) {
                console.log("All images preloaded");
            }, this);
            _load_queue.loadManifest(_load_manifest);
            this.loadQueue = _load_queue;
            console.groupEnd();
        }
    }), init = function(model) {
        module.collection = new DiscoveryCollection();
        if (model instanceof DiscoveryModel) {
            module.collection.add(model);
            module.discoveryView = new DiscoveryView({
                el: "#discovery",
                model: model,
                collection: module.collection
            });
        }
        return module.collection;
    }, make_discovery = function(model) {
        var d = new DiscoveryModel();
        d.set({
            type: model.get("type") || "",
            title: model.get("title") || "",
            slug: model.get("slug") || "",
            content: model.get("content") || "",
            medias: model.get("medias") || []
        });
        return d;
    }, make_discoveries = function(collection) {
        var _discoveries = collection.map(function(model) {
            return {
                type: model.get("type") || "",
                title: model.get("title"),
                slug: model.get("slug"),
                content: model.get("content"),
                medias: model.get("medias") || []
            };
        });
        module.collection.add(_discoveries);
    };
    module.init = init;
    module.make_discovery = make_discovery;
    module.make_discoveries = make_discoveries;
    return module;
}(window, jQuery, createjs);

var PAGE_MODULE = function() {
    var module = _.extend({
        collection: null,
        currentPage: null,
        currentPageView: null
    }, Backbone.Events), name = "page", Model = Backbone.Model.extend({
        initialize: function() {},
        getMediasInfos: function() {
            var attachments = this.get("post_meta").attachments || null, medias = this.get("medias") || [], requests_promises = [];
            if (!attachments) {
                return;
            }
            attachments = $.parseJSON(attachments[0]);
            _.each(attachments.attachments, function(attachment, index) {
                var promise = $.get(VSLV_CONFIG.base_url + "media/" + attachment.id, {
                    context: "single"
                }).success(function(data) {
                    medias[index] = data;
                }).error(function() {
                    throw "Error retrieving medias for project: " + this.get("ID");
                });
                requests_promises.push(promise);
            });
            $.when.apply($, requests_promises).done($.proxy(function() {
                this.set("medias", medias);
                this.trigger("Page:MediasLoaded");
            }, this));
            return requests_promises;
        }
    }), Collection = Backbone.Collection.extend({
        url: VSLV_CONFIG.base_url + VSLV_CONFIG.modules[name].route + "?lang=" + VSLV_CONFIG.lang,
        model: Model
    }), View = Backbone.View.extend({
        visible: false,
        content_template: null,
        events: {
            click: "toggle"
        },
        initialize: function() {
            _.templateSettings.variable = "data";
            this.content_template = _.template($("#content-template").html());
        },
        render: function() {
            this.listenToOnce(this, "PageView:is-hidden", function() {
                this.setText();
                this.$el.show();
            });
            this.hide(0);
            this.show();
        },
        setText: function() {
            this.$el.html(this.content_template(this.model.attributes));
        },
        show: function() {
            var view = this, type = this.model.get("type"), title = this.model.get("title"), slug = this.model.get("slug"), content = this.model.get("content");
            if (content || title && type === "project") {
                if (slug === "references") {
                    this.$el.transition({
                        opacity: 1
                    }, function() {
                        view.visible = true;
                    });
                } else {
                    this.$el.transition({
                        left: 0
                    }, function() {
                        view.visible = true;
                    });
                }
            }
            return this.$el;
        },
        hide: function(offsetX) {
            var view = this, type = this.model.get("type"), slug = this.model.get("slug"), title = this.model.get("title"), content = this.model.get("content"), animation_attributes = {};
            if (type === "project" && offsetX === undefined) {
                offsetX = 40;
            } else if (offsetX === undefined) {
                offsetX = 0;
            }
            if (this.$el.hasClass("center-panel")) {
                animation_attributes = {
                    opacity: 0
                };
            } else {
                animation_attributes = {
                    left: -this.$el.outerWidth() + offsetX
                };
            }
            this.$el.transition(animation_attributes, function() {
                if (view.$el.hasClass("center-panel")) {
                    view.$el.hide();
                }
                if (slug === "references") {
                    view.$el.addClass("center-panel");
                    view.$el.css({
                        opacity: 0
                    });
                } else {
                    view.$el.removeClass("center-panel");
                    view.$el.css({
                        opacity: 1
                    });
                }
                view.visible = false;
                view.trigger("PageView:is-hidden");
            });
            return this.$el;
        },
        toggle: function() {
            if (this.visible) {
                this.hide();
            } else {
                this.show();
            }
        }
    }), init = function(currentPost_data) {
        module.collection = new Collection();
        module.collection.fetch({
            reset: true
        });
        module.collection.on("reset", function() {
            module.trigger("Pages:loaded");
        });
        module.currentPage = new Model(currentPost_data);
        module.currentPageView = new View({
            el: $("#content"),
            model: module.currentPage
        });
        return module.currentPage;
    }, make_page = function(attributes) {
        var model;
        if (!attributes.ID) {
            throw new Error("You need at least an ID to make a page.");
        }
        model = new Model(attributes);
        model.getMediasInfos();
        module.collection.add(model);
        return model;
    };
    module.init = init;
    module.make_page = make_page;
    return module;
}();

var PROJECT_MODULE = function(win, $, cjs) {
    if (typeof cjs === "undefined") {
        throw "Project module depends on CreateJS library. It seems to be missing.";
    }
    var module = _.extend({
        collection: null,
        portfolioView: null
    }, Backbone.Events), name = "project", Model = Backbone.Model.extend({
        mediasLoaded: false,
        initialize: function() {
            if (this.get("featured_image")) {
                this.set("thumbnail", this.get("featured_image").attachment_meta.sizes.thumbnail);
            }
        },
        getMediasInfos: function() {
            var attachments = this.get("post_meta").attachments || null, medias = [], attachments_ids = [];
            if (!attachments) {
                return null;
            }
            attachments = $.parseJSON(attachments[0]);
            _.each(attachments.attachments, function(attachment) {
                attachments_ids.push(attachment.id);
            });
            var promise = $.get(VSLV_CONFIG.base_url + "media/", {
                fields: "ID",
                filter: {
                    post__in: attachments_ids
                }
            }).success(function(data) {
                medias = data;
            }).error(function() {
                throw "Error retrieving medias for project: " + this.get("ID");
            });
            $.when.call($, promise).done($.proxy(function() {
                this.set("medias", medias);
                this.trigger("Project:MediasLoaded");
            }, this));
            return promise;
        }
    }), Collection = Backbone.Collection.extend({
        url: VSLV_CONFIG.base_url + VSLV_CONFIG.modules[name].route + "?lang=" + VSLV_CONFIG.lang,
        model: Model,
        initialize: function() {
            var medias_promises = [];
            this.on("reset", function() {
                module.trigger("Projects:loaded");
            });
        }
    }), PortfolioView = Backbone.View.extend({
        id: "portfolio",
        project_thumbs_queue: null,
        project_thumbs_loaded: false,
        items: [],
        item_animation_delay: 40,
        item_animation_time: 400,
        initialize: function() {
            this.listenTo(this.collection, "reset", this.preloadThumbs);
        },
        preloadThumbs: function() {
            var view = this, project_thumbs_loading_manifest = [];
            this.project_thumbs_queue = new createjs.LoadQueue();
            this.collection.each(function(model) {
                if (model.get("thumbnail")) {
                    project_thumbs_loading_manifest.push({
                        id: "project_" + model.get("slug") + "_thumbnail",
                        src: model.get("thumbnail").url
                    });
                }
            });
            this.project_thumbs_queue.on("complete", function() {
                this.project_thumbs_loaded = true;
                this.render();
                module.trigger("PortfolioView:thumbs-loaded");
            }, this);
            this.project_thumbs_queue.loadManifest(project_thumbs_loading_manifest);
        },
        render: function() {
            this.listenToOnce(this, "PortfolioView:is-open", function() {
                this.collection.each(function(model, index) {
                    var item = new PortofolioItemView({
                        model: model
                    });
                    this.items.push(item);
                    item.render();
                    this.$el.find("ul").append(item.$el);
                }, this);
            });
        },
        show: function() {
            console.log("show portfolio");
            this.$el.stop();
            this.stopListening(this, "PortfolioView:items-hidden");
            this.$el.transition({
                left: 0,
                duration: 400
            });
            if (this.project_thumbs_loaded) {
                this.open();
            }
        },
        hide: function() {
            console.log("hide portfolio");
            this.$el.stop();
            this.stopListening(this, "PortfolioView:items-hidden");
            this.hideItems();
            this.listenTo(this, "PortfolioView:items-hidden", function() {
                this.close();
                this.$el.transition({
                    left: "100%",
                    duration: 1e3
                });
            });
        },
        open: function() {
            var view = this;
            this.$el.transition({
                height: "33%",
                duration: 600
            }, function() {
                view.trigger("PortfolioView:is-open");
                view.$el.addClass("is-open");
                view.showItems();
            });
        },
        close: function() {
            var view = this;
            this.$el.removeClass("is-open");
            this.$el.transition({
                height: "1px",
                duration: 200
            }, function() {
                view.trigger("PortfolioView:is-closed");
            });
        },
        showItems: function() {
            var view = this, delay = 0, timeout = 0;
            _.each(this.items, function(item, index) {
                delay = index * view.item_animation_delay;
                item.show(delay, this.item_animation_time);
            });
            timeout = delay + this.item_animation_time;
            setTimeout(function() {
                view.trigger("PortfolioView:items-shown");
            }, timeout);
        },
        hideItems: function() {
            var view = this, delay = 0, timeout = 0;
            _.each(this.items, function(item, index) {
                delay = index * view.item_animation_delay / 2;
                item.hide(delay, this.item_animation_time / 2);
            });
            timeout = delay + this.item_animation_time / 2;
            setTimeout(function() {
                view.trigger("PortfolioView:items-hidden");
            }, timeout);
        }
    }), PortofolioItemView = Backbone.View.extend({
        tagName: "li",
        animation_duration: 400,
        events: {
            click: "launchProject"
        },
        initialize: function() {},
        render: function() {
            var $link = $("<a />").attr("href", this.model.get("link")), $image = $("<img />").attr("src", this.model.get("thumbnail") ? this.model.get("thumbnail").url : "#");
            this.$el.html($link.append($image));
            return this;
        },
        show: function(delay, duration) {
            var _delay = delay ? delay : 0, _duration = duration ? duration : this.animation_duration;
            this.$el.transition({
                opacity: 1,
                delay: _delay,
                duration: _duration
            });
        },
        hide: function(delay, duration) {
            var _delay = delay ? delay : 0, _duration = duration ? duration : this.animation_duration;
            this.$el.transition({
                opacity: 0,
                delay: _delay,
                duration: _duration
            });
        },
        launchProject: function() {}
    }), init = function(projects) {
        module.collection = new Collection();
        module.portfolioView = new PortfolioView({
            el: "#portfolio",
            collection: module.collection
        });
        if (projects.length) {
            module.collection.reset(projects);
        } else {
            module.collection.fetch({
                reset: true,
                data: {
                    filter: {
                        posts_per_page: -1,
                        orderby: "title",
                        order: "ASC"
                    }
                }
            });
        }
    };
    module.init = init;
    return module;
}(window, jQuery, createjs);

var VSLV_APP = function(page_module, project_module, discovery_module, app_data) {
    var Router = Backbone.Router.extend({
        route: function(route, name, callback) {
            return Backbone.Router.prototype.route.call(this, route, name, function() {
                if (!callback) {
                    callback = this[name];
                }
                this.trigger.apply(this, [ "beforeroute" ].concat(_.toArray(arguments)));
                callback.apply(this, arguments);
            });
        },
        routes: {
            "projects/:slug(/:media_id)": "project",
            "": "page",
            ":slug": "page",
            ":category/:slug": "page"
        },
        project: function(slug, mediaIndex) {
            console.log("project: " + slug);
            this.activateMenuItem(slug);
            if (mediaIndex === null) {
                mediaIndex = 1;
            }
            mediaIndex--;
            if (page_module.currentPageView.model.get("slug") === "portfolio") {
                this.listenToOnce(project_module.portfolioView, "PortfolioView:items-hidden", function() {
                    discoveries.setCurrentModelBySlug(slug, mediaIndex);
                });
            } else {
                discoveries.setCurrentModelBySlug(slug, mediaIndex);
            }
        },
        page: function(slug) {
            console.log("page: " + slug);
            var router = this;
            slug = this.cleanSlug(slug);
            this.activateMenuItem(slug);
            switch (slug) {
              case "portfolio":
                this.renderPage(slug);
                project_module.portfolioView.show();
                break;

              default:
                if (page_module.currentPageView.model.get("slug") === "portfolio") {
                    this.listenToOnce(project_module.portfolioView, "PortfolioView:items-hidden", function() {
                        this.renderPage(slug);
                    });
                } else {
                    this.renderPage(slug);
                }
            }
        },
        renderPage: function(slug) {
            var newPage = page_module.collection.findWhere({
                slug: slug
            });
            if (!newPage && currentPage) {
                newPage = page_module.make_page(currentPage.attributes);
            }
            page_module.currentPageView.model = currentPage = newPage;
            if (!discoveries.setCurrentModelBySlug(slug)) {
                page_module.currentPageView.render();
            }
        },
        cleanSlug: function(slug) {
            if (slug === undefined || slug === "" || slug.match(/^\?(.*)?$/)) {
                slug = app_data.home_page_slug;
            } else {
                slug = slug.replace(/\?(.*)$/, "");
            }
            return slug;
        },
        activateMenuItem: function(slug) {
            $("body > header .navbar-nav li").removeClass("active");
            $("body > header .navbar-nav li.menu-" + slug).addClass("active");
        }
    }), currentPage, discoveryView, discoveries;
    return {
        root: "/",
        router: new Router(),
        firstDiscovery: null,
        common: {
            init: function() {
                console.group("APP INIT");
                app_data = this.parse_app_data();
                page_module.on("Pages:loaded", function() {
                    Backbone.history.start({
                        pushState: true,
                        root: VSLV_APP.root
                    });
                });
                project_module.on("Projects:loaded", function() {
                    this.initDiscoveryProcess(project_module.collection);
                }, this);
                currentPage = page_module.init(app_data.currentPost);
                project_module.init(app_data.projects);
                if (currentPage.get("slug") === "portfolio") {
                    project_module.portfolioView.listenTo(project_module, "PortfolioView:thumbs-loaded", project_module.portfolioView.show);
                }
                firstDiscovery = discovery_module.make_discovery(currentPage);
                if (typeof currentPage.get("medias") !== "undefined" && currentPage.get("medias").length === 0) {
                    currentPage.on("Page:MediasLoaded", function() {
                        firstDiscovery.set("medias", this.get("medias"));
                    }, currentPage);
                } else {
                    firstDiscovery.set("medias", currentPage.get("medias"));
                }
                discoveries = discovery_module.init(firstDiscovery);
                discovery_module.collection.on("Discovery:set", function(discoveryModel) {
                    page_module.currentPageView.model = discoveryModel;
                    page_module.currentPageView.render();
                });
                VSLV_APP.router.on("beforeroute", function() {
                    project_module.portfolioView.hide();
                });
                this.initMainMenu();
                console.groupEnd();
            },
            initDiscoveryProcess: function(collection) {
                var firstDiscovery;
                discovery_module.make_discoveries(collection);
                firstDiscovery = discovery_module.collection.at(0);
                discovery_module.discoveryView.preloadAllMedias();
                if (firstDiscovery.get("type") !== "project") {
                    discovery_module.collection.remove(firstDiscovery);
                } else {
                    var discoveries_to_be_removed = discovery_module.collection.where({
                        slug: firstDiscovery.get("slug")
                    });
                    discoveries_to_be_removed.shift();
                    discovery_module.collection.remove(discoveries_to_be_removed);
                }
            },
            initMainMenu: function() {
                $(".navbar-collapse").on("show.bs.collapse", function() {
                    $(".banner").removeClass("collapsed");
                });
                $(".navbar-collapse").on("hide.bs.collapse", function() {
                    $(".banner").addClass("collapsed");
                });
            },
            parse_app_data: function() {
                _.each(app_data, function(value, key) {
                    try {
                        app_data[key] = $.parseJSON(value);
                    } catch (e) {
                        app_data[key] = value;
                    }
                });
                return app_data;
            },
            finalize: function() {}
        },
        home: {
            init: function() {}
        },
        about: {
            init: function() {}
        }
    };
}(PAGE_MODULE, PROJECT_MODULE, DISCOVERY_MODULE, APP_DATA);

$(document).on("click", "a:not([data-bypass])", function(evt) {
    var href = {
        prop: $(this).prop("href"),
        attr: $(this).attr("href").replace(/^\//, "").replace(/\/$/, "")
    };
    var root = location.protocol + "//" + location.host + VSLV_APP.root;
    if (href.attr.match(/media/)) {
        return;
    }
    if (href.prop && href.prop.slice(0, root.length) === root) {
        evt.preventDefault();
        Backbone.history.navigate(href.attr.replace(root, ""), true);
    }
});

var UTIL = {
    fire: function(func, funcname, args) {
        var namespace = VSLV_APP;
        funcname = funcname === undefined ? "init" : funcname;
        if (func !== "" && namespace[func] && typeof namespace[func][funcname] === "function") {
            namespace[func][funcname](args);
        }
    },
    loadEvents: function() {
        UTIL.fire("common");
        $.each(document.body.className.replace(/-/g, "_").split(/\s+/), function(i, classnm) {
            UTIL.fire(classnm);
        });
        UTIL.fire("common", "finalize");
    }
};

$(document).ready(UTIL.loadEvents);

if (typeof _ === "function") {
    _.mixin({
        move: function(array, fromIndex, toIndex) {
            array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);
            return array;
        }
    });
}
//# sourceMappingURL=/Users/thomasmery/Documents/WebDev/Clients/Mister Brown/Vue Sur La Ville/application/www/wp-content/themes/vslv/assets/js/scripts.min.js.map